
morse_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066f  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
 **********************************************************************/
int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 62       	ori	r24, 0x20	; 32
  84:	84 b9       	out	0x04, r24	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
  86:	85 b1       	in	r24, 0x05	; 5
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	34 e3       	ldi	r19, 0x34	; 52
  90:	8c e0       	ldi	r24, 0x0C	; 12
  92:	21 50       	subi	r18, 0x01	; 1
  94:	30 40       	sbci	r19, 0x00	; 0
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <main+0x12>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
        // Pause several milliseconds
        _delay_ms(SHORT_DELAY);

        // Invert LED in Data Register		LONG ON
        // PORTB = PORTB xor 0010 0000
        PORTB = PORTB ^ (1<<LED_GREEN);
  9e:	95 b1       	in	r25, 0x05	; 5
  a0:	80 e2       	ldi	r24, 0x20	; 32
  a2:	98 27       	eor	r25, r24
  a4:	95 b9       	out	0x05, r25	; 5
  a6:	9f ef       	ldi	r25, 0xFF	; 255
  a8:	23 ed       	ldi	r18, 0xD3	; 211
  aa:	30 e3       	ldi	r19, 0x30	; 48
  ac:	91 50       	subi	r25, 0x01	; 1
  ae:	20 40       	sbci	r18, 0x00	; 0
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
		// Pause several milliseconds
		_delay_ms(4*SHORT_DELAY);

		// Invert LED in Data Register		OFF
		// PORTB = PORTB xor 0010 0000
		PORTB = PORTB ^ (1<<LED_GREEN);
  b8:	95 b1       	in	r25, 0x05	; 5
  ba:	98 27       	eor	r25, r24
  bc:	95 b9       	out	0x05, r25	; 5
  be:	9f ef       	ldi	r25, 0xFF	; 255
  c0:	24 e3       	ldi	r18, 0x34	; 52
  c2:	3c e0       	ldi	r19, 0x0C	; 12
  c4:	91 50       	subi	r25, 0x01	; 1
  c6:	20 40       	sbci	r18, 0x00	; 0
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x44>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x4e>
  ce:	00 00       	nop
		// Pause several milliseconds
		_delay_ms(SHORT_DELAY);
		
		// Invert LED in Data Register		SHORT ON
		// PORTB = PORTB xor 0010 0000
		PORTB = PORTB ^ (1<<LED_GREEN);
  d0:	95 b1       	in	r25, 0x05	; 5
  d2:	98 27       	eor	r25, r24
  d4:	95 b9       	out	0x05, r25	; 5
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	24 e3       	ldi	r18, 0x34	; 52
  da:	3c e0       	ldi	r19, 0x0C	; 12
  dc:	91 50       	subi	r25, 0x01	; 1
  de:	20 40       	sbci	r18, 0x00	; 0
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5c>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x66>
  e6:	00 00       	nop
		// Pause several milliseconds
		_delay_ms(SHORT_DELAY);

		// Invert LED in Data Register		OFF
		// PORTB = PORTB xor 0010 0000
		PORTB = PORTB ^ (1<<LED_GREEN);
  e8:	95 b1       	in	r25, 0x05	; 5
  ea:	89 27       	eor	r24, r25
  ec:	85 b9       	out	0x05, r24	; 5
  ee:	ce cf       	rjmp	.-100    	; 0x8c <main+0xc>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
